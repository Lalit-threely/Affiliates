{"version":3,"file":"affiliate.js","sourceRoot":"","sources":["../../controllers/affiliate.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport Affiliate, { AffiliateAttributes } from '../models/Affiliate';\nimport { v4 as uuidv4 } from 'uuid';\nimport bcrypt from 'bcryptjs';\nimport { Model } from 'sequelize';\n\nexport const createAffiliate = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n  try {\n    const affiliateData: AffiliateAttributes = req.body;\n    \n    // Generate access code if not provided\n    if (!affiliateData.access_code) {\n      affiliateData.access_code = uuidv4().slice(0, 8);\n    }\n\n    // Hash password if provided\n    if (affiliateData.password) {\n      affiliateData.password = await bcrypt.hash(affiliateData.password, 10);\n    }\n\n    const affiliate = await Affiliate.create(affiliateData);\n    res.status(201).json({\n      success: true,\n      data: affiliate,\n      message: 'Affiliate created successfully'\n    });\n  } catch (error) {\n    next(error);\n  }\n};\n\nexport const getAllAffiliates = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n  try {\n    const affiliates = await Affiliate.findAll({\n      attributes: { exclude: ['password'] }\n    });\n    res.status(200).json({\n      success: true,\n      data: affiliates,\n      message: 'Affiliates retrieved successfully'\n    });\n  } catch (error) {\n    next(error);\n  }\n};\n\nexport const getAffiliateById = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n  try {\n    const { id } = req.params;\n    const affiliate = await Affiliate.findByPk(id, {\n      attributes: { exclude: ['password'] }\n    });\n\n    if (!affiliate) {\n      res.status(404).json({\n        success: false,\n        message: 'Affiliate not found'\n      });\n      return;\n    }\n\n    res.status(200).json({\n      success: true,\n      data: affiliate,\n      message: 'Affiliate retrieved successfully'\n    });\n  } catch (error) {\n    next(error);\n  }\n};\n\nexport const updateAffiliate = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n  try {\n    const { id } = req.params;\n    const updateData = req.body;\n\n    // Hash password if it's being updated\n    if (updateData.password) {\n      updateData.password = await bcrypt.hash(updateData.password, 10);\n    }\n\n    const affiliate = await Affiliate.findByPk(id);\n    if (!affiliate) {\n      res.status(404).json({\n        success: false,\n        message: 'Affiliate not found'\n      });\n      return;\n    }\n\n    await affiliate.update(updateData);\n    res.status(200).json({\n      success: true,\n      data: affiliate,\n      message: 'Affiliate updated successfully'\n    });\n  } catch (error) {\n    next(error);\n  }\n};\n\nexport const deleteAffiliate = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n  try {\n    const { id } = req.params;\n    const affiliate = await Affiliate.findByPk(id);\n\n    if (!affiliate) {\n      res.status(404).json({\n        success: false,\n        message: 'Affiliate not found'\n      });\n      return;\n    }\n\n    await affiliate.destroy();\n    res.status(200).json({\n      success: true,\n      message: 'Affiliate deleted successfully'\n    });\n  } catch (error) {\n    next(error);\n  }\n};\n\nexport const validateAccessCode = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n  try {\n    const { access_code } = req.body;\n\n    if (!access_code) {\n      res.status(400).json({\n        success: false,\n        message: 'Access code is required'\n      });\n      return;\n    }\n\n    const affiliate = await Affiliate.findOne({\n      where: { access_code },\n      attributes: ['id', 'name', 'email', 'role', 'status']\n    }) as Model<AffiliateAttributes>;\n\n    if (!affiliate) {\n      res.status(404).json({\n        success: false,\n        message: 'Invalid access code'\n      });\n      return;\n    }\n\n    const affiliateData = affiliate.get();\n    if (affiliateData.status !== 'active') {\n      res.status(403).json({\n        success: false,\n        message: 'Affiliate account is not active'\n      });\n      return;\n    }\n\n    res.status(200).json({\n      success: true,\n      data: affiliateData,\n      message: 'Access code is valid'\n    });\n  } catch (error) {\n    next(error);\n  }\n};\n\n"]}