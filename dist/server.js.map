{"version":3,"file":"server.js","sourceRoot":"","sources":["../server.ts"],"names":[],"mappings":";;;;;AAAA,sDAA8B;AAC9B,gDAAwB;AACxB,8DAAqC;AACrC,oDAA4B;AAC5B,0CAA2C;AAC3C,mEAAiD;AAEjD,gBAAM,CAAC,MAAM,EAAE,CAAC;AAEhB,MAAM,GAAG,GAAG,IAAA,iBAAO,GAAE,CAAC;AACtB,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC;AAEtC,aAAa;AACb,GAAG,CAAC,GAAG,CAAC,IAAA,cAAI,GAAE,CAAC,CAAC;AAChB,GAAG,CAAC,GAAG,CAAC,qBAAU,CAAC,IAAI,EAAE,CAAC,CAAC;AAC3B,GAAG,CAAC,GAAG,CAAC,qBAAU,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AAEnD,SAAS;AACT,GAAG,CAAC,GAAG,CAAC,iBAAiB,EAAE,mBAAe,CAAC,CAAC;AAE5C,wBAAwB;AACxB,GAAG,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9B,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,mBAAmB,EAAE,CAAC,CAAC;AACvE,CAAC,CAAC,CAAC;AAEH,uCAAuC;AACvC,MAAM,WAAW,GAAG,KAAK,IAAI,EAAE;IAC7B,IAAI,CAAC;QACH,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;QAClC,MAAM,iBAAS,CAAC,YAAY,EAAE,CAAC;QAC/B,OAAO,CAAC,GAAG,CAAC,wDAAwD,CAAC,CAAC;QAEtE,uBAAuB;QACvB,MAAM,iBAAS,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QACtC,OAAO,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;QAE7C,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;YACpB,OAAO,CAAC,GAAG,CAAC,6BAA6B,IAAI,EAAE,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,yBAAyB,EAAE,KAAK,CAAC,CAAC;IAClD,CAAC;AACH,CAAC,CAAC;AAEF,WAAW,EAAE,CAAC","sourcesContent":["import express from 'express';\nimport cors from 'cors';\nimport bodyParser from 'body-parser';\nimport dotenv from 'dotenv';\nimport { sequelize } from './models/index';\nimport affiliateRoutes from './routes/affiliate';\n\ndotenv.config();\n\nconst app = express();\nconst port = process.env.PORT || 3000;\n\n// Middleware\napp.use(cors());\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// Routes\napp.use('/api/affiliates', affiliateRoutes);\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.status(200).json({ status: 'OK', message: 'Server is running' });\n});\n\n// Database connection and server start\nconst startServer = async () => {\n  try {\n    console.log('Starting server...');\n    await sequelize.authenticate();\n    console.log('Database connection has been established successfully.');\n    \n    // Sync database models\n    await sequelize.sync({ alter: true });\n    console.log('Database models synchronized.');\n\n    app.listen(port, () => {\n      console.log(`Server is running on port ${port}`);\n    });\n  } catch (error) {\n    console.error('Unable to start server:', error);\n  }\n};\n\nstartServer(); "]}